Traceback (most recent call last):
  File "/home/rotation3/coor-pred/main.py", line 55, in <module>
    avg_train_loss = train(train_dataloader, model, l, writer_train, epoch, learning_rate=5e-4)
  File "/home/rotation3/coor-pred/scripts/train.py", line 24, in train
    for data in train_dataloader:
  File "/home/rotation3/anaconda3/envs/torch/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 628, in __next__
    data = self._next_data()
  File "/home/rotation3/anaconda3/envs/torch/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 671, in _next_data
    data = self._dataset_fetcher.fetch(index)  # may raise StopIteration
  File "/home/rotation3/anaconda3/envs/torch/lib/python3.7/site-packages/torch/utils/data/_utils/fetch.py", line 58, in fetch
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/rotation3/anaconda3/envs/torch/lib/python3.7/site-packages/torch/utils/data/_utils/fetch.py", line 58, in <listcomp>
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/rotation3/coor-pred/data/MyData.py", line 45, in __getitem__
    label = label_generate(pre_coor, a, self.train_mode)
TypeError: label_generate() takes 1 positional argument but 3 were given
Traceback (most recent call last):
  File "/home/rotation3/coor-pred/main.py", line 55, in <module>
    avg_train_loss = train(train_dataloader, model, l, writer_train, epoch, learning_rate=5e-4)
  File "/home/rotation3/coor-pred/scripts/train.py", line 34, in train
    loss = loss_fn(pred, label)
  File "/home/rotation3/anaconda3/envs/torch/lib/python3.7/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/rotation3/anaconda3/envs/torch/lib/python3.7/site-packages/torch/nn/modules/loss.py", line 536, in forward
    return F.mse_loss(input, target, reduction=self.reduction)
  File "/home/rotation3/anaconda3/envs/torch/lib/python3.7/site-packages/torch/nn/functional.py", line 3291, in mse_loss
    expanded_input, expanded_target = torch.broadcast_tensors(input, target)
  File "/home/rotation3/anaconda3/envs/torch/lib/python3.7/site-packages/torch/functional.py", line 74, in broadcast_tensors
    return _VF.broadcast_tensors(tensors)  # type: ignore[attr-defined]
RuntimeError: The size of tensor a (3) must match the size of tensor b (29403) at non-singleton dimension 1
Traceback (most recent call last):
  File "/home/rotation3/coor-pred/main.py", line 55, in <module>
    avg_train_loss = train(train_dataloader, model, l, writer_train, epoch, learning_rate=5e-4)
  File "/home/rotation3/coor-pred/scripts/train.py", line 36, in train
    loss = loss_fn(pred, label)
  File "/home/rotation3/anaconda3/envs/torch/lib/python3.7/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/rotation3/anaconda3/envs/torch/lib/python3.7/site-packages/torch/nn/modules/loss.py", line 536, in forward
    return F.mse_loss(input, target, reduction=self.reduction)
  File "/home/rotation3/anaconda3/envs/torch/lib/python3.7/site-packages/torch/nn/functional.py", line 3291, in mse_loss
    expanded_input, expanded_target = torch.broadcast_tensors(input, target)
  File "/home/rotation3/anaconda3/envs/torch/lib/python3.7/site-packages/torch/functional.py", line 74, in broadcast_tensors
    return _VF.broadcast_tensors(tensors)  # type: ignore[attr-defined]
RuntimeError: The size of tensor a (3) must match the size of tensor b (29403) at non-singleton dimension 1
Traceback (most recent call last):
  File "/home/rotation3/coor-pred/main.py", line 56, in <module>
    avg_train_loss = train(train_dataloader, model, l, writer_train, epoch, learning_rate=5e-4)
  File "/home/rotation3/coor-pred/scripts/train.py", line 24, in train
    for data in train_dataloader:
  File "/home/rotation3/anaconda3/envs/torch/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 628, in __next__
    data = self._next_data()
  File "/home/rotation3/anaconda3/envs/torch/lib/python3.7/site-packages/torch/utils/data/dataloader.py", line 671, in _next_data
    data = self._dataset_fetcher.fetch(index)  # may raise StopIteration
  File "/home/rotation3/anaconda3/envs/torch/lib/python3.7/site-packages/torch/utils/data/_utils/fetch.py", line 58, in fetch
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/rotation3/anaconda3/envs/torch/lib/python3.7/site-packages/torch/utils/data/_utils/fetch.py", line 58, in <listcomp>
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/rotation3/coor-pred/data/MyData.py", line 50, in __getitem__
    coor_label = label_generate(coor, a, self.train_mode)
TypeError: label_generate() takes 1 positional argument but 3 were given
Traceback (most recent call last):
  File "/home/rotation3/coor-pred/main.py", line 55, in <module>
    avg_train_loss = train(train_dataloader, model, l, writer_train, epoch, learning_rate=5e-4)
  File "/home/rotation3/coor-pred/scripts/train.py", line 31, in train
    pred = model(embed, atten)
  File "/home/rotation3/anaconda3/envs/torch/lib/python3.7/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
TypeError: forward() takes 2 positional arguments but 3 were given
Traceback (most recent call last):
  File "/home/rotation3/coor-pred/main.py", line 55, in <module>
    avg_train_loss = train(train_dataloader, model, l, writer_train, epoch, learning_rate=5e-4)
  File "/home/rotation3/coor-pred/scripts/train.py", line 34, in train
    loss = loss_fn(pred, coor_label)
  File "/home/rotation3/anaconda3/envs/torch/lib/python3.7/site-packages/torch/nn/modules/module.py", line 1190, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/rotation3/anaconda3/envs/torch/lib/python3.7/site-packages/torch/nn/modules/loss.py", line 536, in forward
    return F.mse_loss(input, target, reduction=self.reduction)
  File "/home/rotation3/anaconda3/envs/torch/lib/python3.7/site-packages/torch/nn/functional.py", line 3291, in mse_loss
    expanded_input, expanded_target = torch.broadcast_tensors(input, target)
  File "/home/rotation3/anaconda3/envs/torch/lib/python3.7/site-packages/torch/functional.py", line 74, in broadcast_tensors
    return _VF.broadcast_tensors(tensors)  # type: ignore[attr-defined]
RuntimeError: The size of tensor a (3) must match the size of tensor b (29403) at non-singleton dimension 1
